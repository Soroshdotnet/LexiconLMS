@using LexiconLMS.Shared.DTOs;
@using LexiconLMS.Client.Services;


<div id="moduleActivites">
    <p class="list-group list-group-flush"><b>Modules in this course:</b></p>

    <div class="accordion" id="accordionPanelsStayOpenExample">

        @{
            var i = 0;
        }
        
        @foreach (var module in courseSelectedModules)
        {
            i++;

            var h2Id = "panelsStayOpen-heading" + i;

            <div class="accordion-item">

                <h2 class="accordion-header"  id="panelsStayOpen-heading@(i)">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapse@(i)" aria-expanded="false" aria-controls="panelsStayOpen-collapse@(i)">
                        @module.Name
                    </button>
                </h2>
                
                <!--<EditButton Top="-48px" Left="0px"></EditButton>-->
                
                <NavLink href="@($"AddModule/{course.Id}")"><button class="btn btn-link">Add module</button></NavLink>
                
                <div id="panelsStayOpen-collapse@(i)" class="accordion-collapse collapse @(i==1 ? "show" : "")" aria-labelledby="panelsStayOpen-headingOne">
                    <div class="accordion-body">

                        <ActivityTeachers courseSelectedModulesActivities="@module.Activitys" />

                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {

    [Parameter]
    public IEnumerable<ModuleDto> courseSelectedModules { get; set; } = new List<ModuleDto>();

    //private void doSomething()
    //{
    //    Console.WriteLine("From activities");
    //}
    
    //private async void doSomething2()
    //{
    //    Console.WriteLine("From activitites, edit button2");
    //}
        [Parameter]
    public IEnumerable<CourseDto> courseList { get; set; } = new List<CourseDto>();

    private void doSomething()
    {

        Console.WriteLine("From courseList");
    }

    [Parameter]
    public EventCallback<CourseDto> xGetCourse { get; set; }


    public async Task GetCourse(CourseDto course)
    {
        Console.WriteLine("From courseList GetCourse");

        await xGetCourse.InvokeAsync(course);
    }
}